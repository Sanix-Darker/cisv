name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '23.x'
  CACHE_KEY_PREFIX: 'cisv-v1'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache keys
        id: cache-keys
        run: echo "node=${{ env.CACHE_KEY_PREFIX }}-node-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ steps.cache-keys.outputs.node }}

  npm-tests:
    name: Node.js Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build and test
        run: npm run test:build

  c-tests:
    name: C Native Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache build tools
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt
            /usr/include
          key: ${{ env.CACHE_KEY_PREFIX }}-build-tools-${{ runner.os }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake valgrind

      - name: Run C test suite
        run: make test-c

  cli-build-test:
    name: CLI Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install node-gyp
        run: npm install -g node-gyp

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/
            cisv_bin
          key: ${{ env.CACHE_KEY_PREFIX }}-cli-${{ matrix.os }}-${{ hashFiles('cisv/**', 'binding.gyp', 'Makefile') }}

      - name: Build CLI
        run: |
          make clean
          make build
          make cli

      - name: Test CLI functionality
        run: |
          cat > test.csv << 'EOF'
          id,name,value
          1,test,100
          2,demo,200
          EOF
          ./cisv_bin --version
          ./cisv_bin --help
          test "$(./cisv_bin -c test.csv | tr -d '[:space:]')" = "3"
          ./cisv_bin test.csv
          ./cisv_bin -s 0,2 test.csv
          ./cisv_bin --head 1 test.csv
          rm -f test.csv

      - name: Upload CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: cisv_bin-${{ matrix.os }}
          path: cisv_bin
          retention-days: 7

  memory-check:
    name: Memory Safety Tests
    runs-on: ubuntu-latest
    needs: cli-build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install memory checking tools
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind cppcheck clang-tools

      - name: Install node-gyp
        run: npm install -g node-gyp

      - name: Build with debug symbols
        run: |
          make clean
          make build
          CFLAGS="-g -O0" make cli

      - name: Create test data
        run: |
          cat > memtest.csv << 'EOF'
          id,name,value
          1,test,100
          2,demo,200
          EOF

      - name: Run Valgrind tests
        run: |
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --verbose --log-file=valgrind-version.log ./cisv_bin --version
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --log-file=valgrind-basic.log ./cisv_bin memtest.csv
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --log-file=valgrind-count.log ./cisv_bin -c memtest.csv
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --log-file=valgrind-select.log ./cisv_bin -s 0,2 memtest.csv

      - name: Check for memory leaks
        run: |
          ! grep -q "definitely lost" valgrind-*.log
          ! grep -q "indirectly lost" valgrind-*.log

      - name: Run deep leak tests
        run: |
          if [ -f test_select.sh ]; then chmod +x test_select.sh && bash ./test_select.sh; fi
          if [ -f test_transform.sh ]; then chmod +x test_transform.sh && bash ./test_transform.sh; fi

      - name: Upload memory check logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: memory-check-logs
          path: valgrind-*.log
          retention-days: 30

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [setup, cli-build-test]
    if: |
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'benchmarks')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: |
          npm install -g node-gyp
          sudo apt-get update
          sudo apt-get install -y bc time python3

      - name: Build modules
        run: |
          npm run build
          make cli

      - name: Make scripts executable
        run: |
          chmod +x scripts/generate_test_data.sh
          chmod +x scripts/run_benchmarks.sh
          chmod +x benchmark_cli.sh

      - name: Generate test data
        run: |
          bash scripts/generate_test_data.sh --all --fixtures

      - name: Checkout fresh
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Run benchmarks
        run: |
          export GITHUB_SHA="${{ github.sha }}"
          export GITHUB_REF_NAME="${{ github.ref_name }}"
          make clean && make build && make cli
          bash scripts/run_benchmarks.sh
          cat ./BENCHMARKS.md

      - name: Commit and force push
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          # Just add, commit and force push - don't try to merge anything
          git add BENCHMARKS.md
          git commit -m "Update benchmark results [skip ci]" || exit 0
          git push --force origin ${{ github.event.pull_request.head.ref }}

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Comment PR with summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('BENCHMARKS.md')) {
              const content = fs.readFileSync('BENCHMARKS.md', 'utf8');
              const lines = content.split('\n');

              let summary = '## BENCHMARK RESULTS\n\n';
              summary += 'Benchmarks completed successfully!\n\n';

              // Extract first few lines for summary
              const dateLines = lines.filter(l => l.includes('Date:') || l.includes('Commit:')).slice(0, 2);
              summary += dateLines.join('\n') + '\n\n';

              summary += '>>> Full results: [BENCHMARKS.md](../blob/${{ github.head_ref }}/BENCHMARKS.md)\n';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Upload benchmark artifacts
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-outputs
          path: |
            benchmark-*-output.txt
            BENCHMARKS.md
            *.csv
          retention-days: 30

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [npm-tests, c-tests, cli-build-test, memory-check]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "One or more jobs were cancelled"
            exit 1
          else
            echo "All CI jobs succeeded"
          fi
